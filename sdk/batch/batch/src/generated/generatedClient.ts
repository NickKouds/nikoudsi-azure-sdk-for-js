/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest
} from "@azure/core-rest-pipeline";
import {
  ApplicationOperationsImpl,
  PoolOperationsImpl,
  AccountImpl,
  JobImpl,
  CertificateOperationsImpl,
  FileImpl,
  JobScheduleOperationsImpl,
  TaskImpl,
  ComputeNodeOperationsImpl,
  ComputeNodeExtensionImpl
} from "./operations";
import {
  ApplicationOperations,
  PoolOperations,
  Account,
  Job,
  CertificateOperations,
  File,
  JobScheduleOperations,
  Task,
  ComputeNodeOperations,
  ComputeNodeExtension
} from "./operationsInterfaces";
import { GeneratedClientOptionalParams } from "./models";

/** @internal */
export class GeneratedClient extends coreClient.ServiceClient {
  batchUrl: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param batchUrl The base URL for all Azure Batch service requests.
   * @param options The parameter options
   */
  constructor(batchUrl: string, options?: GeneratedClientOptionalParams) {
    if (batchUrl === undefined) {
      throw new Error("'batchUrl' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: GeneratedClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8"
    };

    const packageDetails = `azsdk-js-batch/11.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint ?? options.baseUri ?? "{batchUrl}"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.batchUrl = batchUrl;

    // Assigning values to Constant parameters
    this.apiVersion = options.apiVersion || "2022-01-01.15.0";
    this.applicationOperations = new ApplicationOperationsImpl(this);
    this.poolOperations = new PoolOperationsImpl(this);
    this.account = new AccountImpl(this);
    this.job = new JobImpl(this);
    this.certificateOperations = new CertificateOperationsImpl(this);
    this.file = new FileImpl(this);
    this.jobScheduleOperations = new JobScheduleOperationsImpl(this);
    this.task = new TaskImpl(this);
    this.computeNodeOperations = new ComputeNodeOperationsImpl(this);
    this.computeNodeExtension = new ComputeNodeExtensionImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      }
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  applicationOperations: ApplicationOperations;
  poolOperations: PoolOperations;
  account: Account;
  job: Job;
  certificateOperations: CertificateOperations;
  file: File;
  jobScheduleOperations: JobScheduleOperations;
  task: Task;
  computeNodeOperations: ComputeNodeOperations;
  computeNodeExtension: ComputeNodeExtension;
}
