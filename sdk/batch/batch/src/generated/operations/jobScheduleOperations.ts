/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { JobScheduleOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  JobSchedule,
  JobScheduleListNextOptionalParams,
  JobScheduleListOptionalParams,
  JobScheduleExistsOptionalParams,
  JobScheduleExistsResponse,
  JobScheduleDeleteOptionalParams,
  JobScheduleDeleteResponse,
  JobScheduleGetOptionalParams,
  JobScheduleGetResponse,
  JobScheduleUpdate,
  JobSchedulePatchOptionalParams,
  JobSchedulePatchResponse,
  JobScheduleUpdateOptionalParams,
  JobScheduleUpdateResponse,
  JobScheduleDisableOptionalParams,
  JobScheduleDisableResponse,
  JobScheduleEnableOptionalParams,
  JobScheduleEnableResponse,
  JobScheduleTerminateOptionalParams,
  JobScheduleTerminateResponse,
  JobScheduleAddOptionalParams,
  JobScheduleAddResponse,
  JobScheduleListResponse,
  JobScheduleListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobScheduleOperations operations. */
export class JobScheduleOperationsImpl implements JobScheduleOperations {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class JobScheduleOperations class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Lists all of the Job Schedules in the specified Account.
   * @param options The options parameters.
   */
  public list(
    options?: JobScheduleListOptionalParams
  ): PagedAsyncIterableIterator<JobSchedule> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: JobScheduleListOptionalParams
  ): AsyncIterableIterator<JobSchedule[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.odataNextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.odataNextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: JobScheduleListOptionalParams
  ): AsyncIterableIterator<JobSchedule> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Checks the specified Job Schedule exists.
   * @param jobScheduleId The ID of the Job Schedule which you want to check.
   * @param options The options parameters.
   */
  exists(
    jobScheduleId: string,
    options?: JobScheduleExistsOptionalParams
  ): Promise<JobScheduleExistsResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, options },
      existsOperationSpec
    );
  }

  /**
   * When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks
   * are deleted, all the files in their working directories on the Compute Nodes are also deleted (the
   * retention period is ignored). The Job Schedule statistics are no longer accessible once the Job
   * Schedule is deleted, though they are still counted towards Account lifetime statistics.
   * @param jobScheduleId The ID of the Job Schedule to delete.
   * @param options The options parameters.
   */
  delete(
    jobScheduleId: string,
    options?: JobScheduleDeleteOptionalParams
  ): Promise<JobScheduleDeleteResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets information about the specified Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule to get.
   * @param options The options parameters.
   */
  get(
    jobScheduleId: string,
    options?: JobScheduleGetOptionalParams
  ): Promise<JobScheduleGetResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, options },
      getOperationSpec
    );
  }

  /**
   * This replaces only the Job Schedule properties specified in the request. For example, if the
   * schedule property is not specified with this request, then the Batch service will keep the existing
   * schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has
   * taken place; currently running Jobs are unaffected.
   * @param jobScheduleId The ID of the Job Schedule to update.
   * @param jobSchedulePatchParameter The parameters for the request.
   * @param options The options parameters.
   */
  patch(
    jobScheduleId: string,
    jobSchedulePatchParameter: JobScheduleUpdate,
    options?: JobSchedulePatchOptionalParams
  ): Promise<JobSchedulePatchResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, jobSchedulePatchParameter, options },
      patchOperationSpec
    );
  }

  /**
   * This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule
   * property is not specified with this request, then the Batch service will remove the existing
   * schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has
   * taken place; currently running Jobs are unaffected.
   * @param jobScheduleId The ID of the Job Schedule to update.
   * @param jobScheduleUpdateParameter The parameters for the request.
   * @param options The options parameters.
   */
  update(
    jobScheduleId: string,
    jobScheduleUpdateParameter: JobSchedule,
    options?: JobScheduleUpdateOptionalParams
  ): Promise<JobScheduleUpdateResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, jobScheduleUpdateParameter, options },
      updateOperationSpec
    );
  }

  /**
   * No new Jobs will be created until the Job Schedule is enabled again.
   * @param jobScheduleId The ID of the Job Schedule to disable.
   * @param options The options parameters.
   */
  disable(
    jobScheduleId: string,
    options?: JobScheduleDisableOptionalParams
  ): Promise<JobScheduleDisableResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, options },
      disableOperationSpec
    );
  }

  /**
   * Enables a Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule to enable.
   * @param options The options parameters.
   */
  enable(
    jobScheduleId: string,
    options?: JobScheduleEnableOptionalParams
  ): Promise<JobScheduleEnableResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, options },
      enableOperationSpec
    );
  }

  /**
   * Terminates a Job Schedule.
   * @param jobScheduleId The ID of the Job Schedule to terminates.
   * @param options The options parameters.
   */
  terminate(
    jobScheduleId: string,
    options?: JobScheduleTerminateOptionalParams
  ): Promise<JobScheduleTerminateResponse> {
    return this.client.sendOperationRequest(
      { jobScheduleId, options },
      terminateOperationSpec
    );
  }

  /**
   * Adds a Job Schedule to the specified Account.
   * @param jobSchedule The Job Schedule to be added.
   * @param options The options parameters.
   */
  add(
    jobSchedule: JobSchedule,
    options?: JobScheduleAddOptionalParams
  ): Promise<JobScheduleAddResponse> {
    return this.client.sendOperationRequest(
      { jobSchedule, options },
      addOperationSpec
    );
  }

  /**
   * Lists all of the Job Schedules in the specified Account.
   * @param options The options parameters.
   */
  private _list(
    options?: JobScheduleListOptionalParams
  ): Promise<JobScheduleListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: JobScheduleListNextOptionalParams
  ): Promise<JobScheduleListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const existsOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.JobScheduleExistsHeaders
    },
    404: {},
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout45],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId45,
    Parameters.returnClientRequestId45,
    Parameters.ocpDate45,
    Parameters.ifMatch15,
    Parameters.ifNoneMatch15,
    Parameters.ifModifiedSince19,
    Parameters.ifUnmodifiedSince19
  ],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}",
  httpMethod: "DELETE",
  responses: {
    202: {
      headersMapper: Mappers.JobScheduleDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout46],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId46,
    Parameters.returnClientRequestId46,
    Parameters.ocpDate46,
    Parameters.ifMatch16,
    Parameters.ifNoneMatch16,
    Parameters.ifModifiedSince20,
    Parameters.ifUnmodifiedSince20
  ],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobSchedule,
      headersMapper: Mappers.JobScheduleGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select8,
    Parameters.expand5,
    Parameters.timeout47
  ],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId47,
    Parameters.returnClientRequestId47,
    Parameters.ocpDate47,
    Parameters.ifMatch17,
    Parameters.ifNoneMatch17,
    Parameters.ifModifiedSince21,
    Parameters.ifUnmodifiedSince21
  ],
  serializer
};
const patchOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      headersMapper: Mappers.JobSchedulePatchHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  requestBody: Parameters.jobSchedulePatchParameter,
  queryParameters: [Parameters.apiVersion, Parameters.timeout48],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.clientRequestId48,
    Parameters.returnClientRequestId48,
    Parameters.ocpDate48,
    Parameters.ifMatch18,
    Parameters.ifNoneMatch18,
    Parameters.ifModifiedSince22,
    Parameters.ifUnmodifiedSince22
  ],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}",
  httpMethod: "PUT",
  responses: {
    200: {
      headersMapper: Mappers.JobScheduleUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  requestBody: Parameters.jobScheduleUpdateParameter,
  queryParameters: [Parameters.apiVersion, Parameters.timeout49],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.clientRequestId49,
    Parameters.returnClientRequestId49,
    Parameters.ocpDate49,
    Parameters.ifMatch19,
    Parameters.ifNoneMatch19,
    Parameters.ifModifiedSince23,
    Parameters.ifUnmodifiedSince23
  ],
  mediaType: "json",
  serializer
};
const disableOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}/disable",
  httpMethod: "POST",
  responses: {
    204: {
      headersMapper: Mappers.JobScheduleDisableHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout50],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId50,
    Parameters.returnClientRequestId50,
    Parameters.ocpDate50,
    Parameters.ifMatch20,
    Parameters.ifNoneMatch20,
    Parameters.ifModifiedSince24,
    Parameters.ifUnmodifiedSince24
  ],
  serializer
};
const enableOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}/enable",
  httpMethod: "POST",
  responses: {
    204: {
      headersMapper: Mappers.JobScheduleEnableHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout51],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId51,
    Parameters.returnClientRequestId51,
    Parameters.ocpDate51,
    Parameters.ifMatch21,
    Parameters.ifNoneMatch21,
    Parameters.ifModifiedSince25,
    Parameters.ifUnmodifiedSince25
  ],
  serializer
};
const terminateOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules/{jobScheduleId}/terminate",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.JobScheduleTerminateHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.timeout52],
  urlParameters: [Parameters.batchUrl, Parameters.jobScheduleId],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId52,
    Parameters.returnClientRequestId52,
    Parameters.ocpDate52,
    Parameters.ifMatch22,
    Parameters.ifNoneMatch22,
    Parameters.ifModifiedSince26,
    Parameters.ifUnmodifiedSince26
  ],
  serializer
};
const addOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.JobScheduleAddHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  requestBody: Parameters.jobSchedule,
  queryParameters: [Parameters.apiVersion, Parameters.timeout53],
  urlParameters: [Parameters.batchUrl],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.clientRequestId53,
    Parameters.returnClientRequestId53,
    Parameters.ocpDate53
  ],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/jobschedules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobScheduleListResult,
      headersMapper: Mappers.JobScheduleListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter10,
    Parameters.select9,
    Parameters.expand6,
    Parameters.maxResults11,
    Parameters.timeout54
  ],
  urlParameters: [Parameters.batchUrl],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId54,
    Parameters.returnClientRequestId54,
    Parameters.ocpDate54
  ],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobScheduleListResult,
      headersMapper: Mappers.JobScheduleListNextHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter10,
    Parameters.select9,
    Parameters.expand6,
    Parameters.maxResults11,
    Parameters.timeout54
  ],
  urlParameters: [Parameters.batchUrl, Parameters.nextLink],
  headerParameters: [
    Parameters.accept,
    Parameters.clientRequestId54,
    Parameters.returnClientRequestId54,
    Parameters.ocpDate54
  ],
  serializer
};
